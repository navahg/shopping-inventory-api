# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
# Install the tools required for the docker operations
- task: CmdLine@2
  displayName: Install AWS cli
  inputs:
    script: |
      sudo pip3 install pip --upgrade
      pip install awscli --upgrade --user

# Build and push the docker
- task: Docker@2
  displayName: Login to the Dockerhub
  inputs:
    containerRegistry: 'docker-hub-conn'
    command: 'login'
- task: Docker@2
  displayName: Build and push the app to Dockerhub
  inputs:
    containerRegistry: 'docker-hub-conn'
    repository: 'raghavan16/shopping-api'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'

# Apply the changes
- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'k8s-conn'
    command: 'apply'
    arguments: '-f $(Build.SourcesDirectory)/kube-deploy.yaml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'k8s-conn'
    command: 'apply'
    arguments: '-f $(Build.SourcesDirectory)/kube-service.yaml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'

# Deploy on kubernetes
- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'k8s-conn'
    command: 'set'
    arguments: 'image deployment/shopping-api shopping-api=raghavan16/shopping-api:$(Build.BuildId)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'

# Wait for the service to be created and update the IP
- task: AWSShellScript@1
  inputs:
    awsCredentials: 'aws-conn'
    regionName: 'us-east-1'
    scriptType: 'inline'
    inlineScript: |-
      bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc shopping-api-lb --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip'
      export PATH=$PATH:~/.local/bin
      touch api-endpoint.json
      echo "{\"ip\": $external_ip}" > api-endpoint.json
      aws s3 cp api-endpoint.json s3://raghavan-test-bucket
